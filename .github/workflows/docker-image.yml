name: CI with Cypress and Docker

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  e2e-tests:
    runs-on: ubuntu-latest


    steps:
      - uses: actions/checkout@v4


      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Install All Dependencies
        run: |
          npm ci # Install frontend deps
          cd student-api && npm ci # Install backend deps

      - name: Start backend (Port 1234)
        run: cd student-api && npm start &

      - name: Start frontend (Port 4200)
        run: npm start &

      - name: Wait for servers
        run: npx wait-on http-get://localhost:4200 http-get://localhost:1234 --timeout 60000

      - name: Run Cypress tests
        uses: cypress-io/github-action@v6
        with:
          spec: cypress/e2e/logintest.cy.ts
  build:
    needs: e2e-tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Set up tags
      run: |
        VERSION="1.${GITHUB_RUN_NUMBER}"
        echo "VERSION=$VERSION" >> $GITHUB_ENV

        PROJECT_NAME="mitra"
        echo "PROJECT_NAME=$PROJECT_NAME" >> $GITHUB_ENV

    - name: Build Docker images with docker compose
      run: |
        docker compose -p "$PROJECT_NAME" build


    - name: Retag and Push images
      run: |
        FRONTEND_REPO="uros02/mitra88-frontend"
        FRONTEND_IMAGE_ID=$(docker images -q ${PROJECT_NAME}-frontend)

        docker tag $FRONTEND_IMAGE_ID $FRONTEND_REPO:latest
        docker push $FRONTEND_REPO:latest

        docker tag $FRONTEND_IMAGE_ID $FRONTEND_REPO:$VERSION
        docker push $FRONTEND_REPO:$VERSION

        BACKEND_REPO="uros02/mitra88-backend"
        BACKEND_IMAGE_ID=$(docker images -q ${PROJECT_NAME}-backend)

        docker tag $BACKEND_IMAGE_ID $BACKEND_REPO:latest
        docker push $BACKEND_REPO:latest

        docker tag $BACKEND_IMAGE_ID $BACKEND_REPO:$VERSION
        docker push $BACKEND_REPO:$VERSION 


        

      
      